import streamlit as st
import cv2
import numpy as np
import os
import pandas as pd
from pathlib import Path
import torch  # For GPU detection
import openai
import subprocess
import whisper

device = "cuda" if torch.cuda.is_available() else "cpu"

# ========== Streamlit Page Config ==========
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ª–∏—Ü –≤ –≤–∏–¥–µ–æ",
    page_icon="üé•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ========== –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π ==========
def create_directories():
    """
    –°–æ–∑–¥–∞—ë—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    """
    try:
        Path("storage/videos").mkdir(parents=True, exist_ok=True)
        Path("storage/results").mkdir(parents=True, exist_ok=True)
        Path("storage/audio").mkdir(parents=True, exist_ok=True)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {str(e)}")
        raise

def analyze_csv(csv_path):
    """
    –°—á–∏—Ç—ã–≤–∞–µ—Ç CSV –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:
    - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    - –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º DataFrame –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç.
    """
    try:
        df = pd.read_csv(csv_path)
        expression_counts = df["Expression"].value_counts()
        avg_confidence = df.groupby("Expression")["Confidence"].mean()

        summary = f"""
        üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º –ª–∏—Ü**:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–π:
        {expression_counts.to_string()}
        - –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:
        {avg_confidence.to_string()}
        """
        return df, summary
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ CSV: {str(e)}"

def detect_emotion_shifts(df):
    """
    Identifies extreme changes in emotions within the DataFrame.
    """
    emotion_changes = []
    prev_emotion = None
    prev_prev_emotion = None

    for index, row in df.iterrows():
        current_emotion = row["Expression"]
        
        if prev_emotion and prev_prev_emotion:
            # Detect a rapid shift (A ‚Üí B ‚Üí C)
            if current_emotion != prev_emotion and prev_emotion != prev_prev_emotion and current_emotion != prev_prev_emotion:
                emotion_changes.append(
                    f"‚ö†Ô∏è –†–µ–∑–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ —ç–º–æ—Ü–∏–π: {prev_prev_emotion} ‚Üí {prev_emotion} ‚Üí {current_emotion} "
                    f"(–≤—Ä–µ–º—è: {row['Timestamp (s)']} —Å–µ–∫), (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–∏–∫—Ü–∏–∏: {row['Confidence']})"
                )

            # Detect alternation (A ‚Üí B ‚Üí A ‚Üí B)
            if current_emotion == prev_prev_emotion and prev_emotion != current_emotion:
                emotion_changes.append(
                    f"‚ö†Ô∏è –ß–∞—Å—Ç–∞—è —Å–º–µ–Ω–∞ —ç–º–æ—Ü–∏–π: {prev_prev_emotion} ‚Üí {prev_emotion} ‚Üí {current_emotion} "
                    f"(–≤—Ä–µ–º—è: {row['Timestamp (s)']} —Å–µ–∫), (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–∏–∫—Ü–∏–∏: {row['Confidence']})"
                )

        prev_prev_emotion = prev_emotion
        prev_emotion = current_emotion

    return emotion_changes

import openai

def get_openai_insights(df):
    """
    –§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç DataFrame, –∏—â–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ä–µ–∑–∫–∏—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π,
    —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—ã—Ç–∫—É —É–∫–ª–æ–Ω–∏—Ç—å—Å—è –æ—Ç –æ—Ç–≤–µ—Ç–∞,
    –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
    """
    try:
        # –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π API –∫–ª—é—á
        api_key = st.secrets["openai_api_key"]
        if not api_key:
            return "–û—à–∏–±–∫–∞: API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        openai.api_key = api_key

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ DataFrame
        shape_info = f"–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç—Ä–æ–∫–∏, —Å—Ç–æ–ª–±—Ü—ã): {df.shape}"
        stats_info = df.describe().to_string()
        sample_rows = df.head(10).to_string(index=False)

        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–º–æ—Ü–∏–π
        emotion_alerts = detect_emotion_shifts(df)
        if emotion_alerts:
            emotion_alerts_summary = "\n".join(emotion_alerts)
        else:
            emotion_alerts_summary = "–ù–µ—Ç —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–º–æ—Ü–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –±–µ–∑–æ—Ç–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è."

        summary_prompt = f"""
        –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤ —Ö–æ–¥–µ –æ–ø—Ä–æ—Å–∞/–¥–æ–ø—Ä–æ—Å–∞ —Å–≤–∏–¥–µ—Ç–µ–ª—è –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ –ø–æ –¥–µ–ª—É:

        1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:
        {shape_info}

        2. –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        {stats_info}

        3. –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤—ã—Ö 10 —Å—Ç—Ä–æ–∫:
        {sample_rows}

        4. –†–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–π:
        {emotion_alerts_summary}

        –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤—ã—è–≤–∏ —ç–ø–∏–∑–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, 
        –ø–æ–ø—ã—Ç–∫—É —É–∫–ª–æ–Ω–∏—Ç—å—Å—è –æ—Ç –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –∏–Ω–æ–µ –Ω–µ—Ç–∏–ø–∏—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. 
        –ï—Å–ª–∏ –≤ —Ö–æ–¥–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏ –±—ã—Å—Ç—Ä—ã–µ —Å–∫–∞—á–∫–∏ —ç–º–æ—Ü–∏–π, —É–∫–∞–∂–∏ –∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ 
        (–ø—Ä–µ–≤—Ä–∞—â–∞—è –∏—Ö –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—É–Ω–¥ –≤ –º–∏–Ω:—Å–µ–∫). –£—á–∏—Ç—ã–≤–∞–π –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —è –¥–∞–ª. 
        –ù–µ –ø—Ä—ã–≥–∞–π –∫ –≤—ã–≤–æ–¥–∞–º —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ —Ä–µ–∑–∫–æ –º–µ–Ω—è–µ—Ç —ç–º–æ—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ –µ—Å—Ç—å confidence factor, 
        –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Ç–æ–∂–µ –±—ã—Ç—å –≤—ã—Å–æ–∫–∏–º. –î–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –Ω–∞—Å—á–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –¢–û–õ–¨–ö–û –¢–û–ì–î–ê, 
        –∫–æ–≥–¥–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –≤—ã—Å–æ–∫–∞—è.

        –í–æ—Ç —Å–µ–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –û–ë–Ø–ó–ê–ù–´ –ü–†–ò–°–¢–£–¢–°–í–û–í–ê–¢–¨ –≤ —Ç–≤–æ–µ–º –æ—Ç–≤–µ—Ç–µ:
        –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –≠–ü–ò–ó–û–î–´ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ô –î–ï–°–¢–ê–ë–ò–õ–ò–ó–ê–¶–ò–ò:
        –°–ï–†–ò–Ø –í–´–°–û–ö–û–ß–ê–°–¢–û–¢–ù–´–• –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–• –§–õ–£–ö–¢–£–ê–¶–ò–ô:
        –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –≠–ü–ò–ó–û–î–´ –° –í–´–°–û–ö–ò–ú –£–†–û–í–ù–ï–ú –î–û–°–¢–û–í–ï–†–ù–û–°–¢–ò:
        –≠–ö–°–ü–ï–†–¢–ù–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:
        """

        response = openai.chat.completions.create(
            model="o3-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –≤—ã—Å—Ç—É–ø–∞–µ—à—å –≤ —Ä–æ–ª–∏ –æ–ø—ã—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–µ–≥–æ—Å—è –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –¥–æ–ø—Ä–æ—Å–æ–≤."},
                {"role": "user", "content": summary_prompt}
            ],
        )

        return response.choices[0].message.content

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {str(e)}"

# ========== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ ==========
def extract_audio(video_path, audio_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∞—É–¥–∏–æ –∏–∑ mp4-—Ñ–∞–π–ª–∞ —Å –ø–æ–º–æ—â—å—é ffmpeg.
    –¢—Ä–µ–±—É–µ—Ç—Å—è, —á—Ç–æ–±—ã ffmpeg –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.
    """
    try:
        # -y –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
        cmd = f'ffmpeg -i "{video_path}" -ar 16000 -ac 1 -c:a pcm_s16le -y "{audio_path}"'
        subprocess.run(cmd, shell=True, check=True)
    except Exception as e:
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ: {str(e)}")

# # ========== –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper (GPU, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ) ==========
# def transcribe_audio(audio_path, whisper_model="turbo"):
#     """
#     –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ OpenAI Whisper.
#     –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CUDA, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ.
#     """
#     try:
#         device = "cuda" if torch.cuda.is_available() else "cpu"
#         model = whisper.load_model(whisper_model, device=device)
#         result = model.transcribe(audio_path, fp16=False, language="ru")
#         return result["text"]
#     except Exception as e:
#         raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ Whisper: {str(e)}")

def transcribe_audio(audio_path: str, whisper_model="turbo") -> str:
    """
    –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ OpenAI Whisper API.
    –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–π API-–∫–ª—é—á OpenAI (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY).
    """
    try:
        openai.api_key = st.secrets["openai_api_key"]
        with open(audio_path, "rb") as f:
            transcript = openai.audio.transcriptions.create(
                model="whisper-1",
                file=f,
                language="ru"
            )
        return transcript.text
    except Exception as e:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ OpenAI Whisper API: {str(e)}")


# ========== –£–ª—É—á—à–∏—Ç—å/–æ—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç —Å –ø–æ–º–æ—â—å—é ChatGPT ==========
def enhance_transcript(raw_transcript):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ ChatGPT,
    —á—Ç–æ–±—ã –Ω–µ–º–Ω–æ–≥–æ —É–ª—É—á—à–∏—Ç—å/–æ—á–∏—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç (–∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é/–ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ —Ç.–¥.).
    """
    try:
        # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        api_key = st.secrets["openai_api_key"]
        if not api_key:
            return "–û—à–∏–±–∫–∞: API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        openai.api_key = api_key

        prompt = f"""
–í–æ—Ç —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:
\"\"\"{raw_transcript}\"\"\"

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π –∂–µ—Å—Ç–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É. –≠—Ç–æ –≤–∏–¥–µ–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–∞–Ω–Ω—ã–º –ø–æ –¥–æ–ø—Ä–æ—Å—É —Å–≤–∏–¥–µ—Ç–µ–ª—è –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ, 
–∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤. –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≥–æ–≤–æ—Ä—è—â–µ–≥–æ, 
–≥–¥–µ –æ–Ω–∏ –∂–∏–≤—É—Ç –∏ —Ç.–¥. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–æ–±–æ–π —Ç–µ–∫—Å—Ç, –Ω–∏—á–µ–≥–æ –±–æ–ª–µ–µ. —Ä–∞–∑–±–µ–π –Ω–∞ –¥–≤–∞ –ª–∏—Ü–∞ - –¥–æ–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –∏ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è
        """

        response = openai.chat.completions.create(
            model="o3-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –¢—ã –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –í–ï–°–¨ —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"},
                {"role": "user", "content": prompt}
            ],
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API (enhance_transcript): {str(e)}"

# ========== –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (summary) —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ ==========
def summarize_transcript(enhanced_transcript):
    """
    —Ä–µ–∑—é–º–∏—Ä—É–π.
    """
    try:
        # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á
        api_key = st.secrets["openai_api_key"]
        if not api_key:
            return "–û—à–∏–±–∫–∞: API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

        openai.api_key = api_key

        prompt = f"""
–¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∑—é–º–µ:
\"\"\"{enhanced_transcript}\"\"\" 

–°—Ñ–æ—Ä–º–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ/—Å—É—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞: –¢–û–õ–¨–ö–û –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏.
–≠—Ç–æ –≤–∏–¥–µ–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–∞–Ω–Ω—ã–º –ø–æ –¥–æ–ø—Ä–æ—Å—É —Å–≤–∏–¥–µ—Ç–µ–ª—è –∏–ª–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º–æ–≥–æ, 
–∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤.
        """

        response = openai.chat.completions.create(
            model="o3-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç —Ä–µ–∑—é–º–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤."},
                {"role": "user", "content": prompt}
            ],
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API (summarize_transcript): {str(e)}"

# ========== –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Ü ==========
def run_face_analysis(video_path):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç FaceAnalysisPipeline —Å GPU –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏,
    –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –≤–∞—à –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ FaceAnalysisPipeline
    –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä device –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç torch.cuda.is_available().
    """
    try:
        st.info("üîç –ó–∞–ø—É—Å–∫ –í–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞...")

        import sys
        sys.path.append(".")
        from face_analysis_main import FaceAnalysisPipeline  # to avoid re-import issues

        # –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞, –µ—Å–ª–∏ FaceAnalysisPipeline –≤–Ω—É—Ç—Ä–∏ —Å–∞–º —Ä–µ—à–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ CUDA
        pipeline = FaceAnalysisPipeline(model_path="./yolov8n-face.pt", video_path=video_path)
        pipeline.run_analysis()

        from pathlib import Path
        csv_path = pipeline.get_csv_output_path()
        if os.path.exists(csv_path):
            return csv_path
        else:
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return None

# ========== –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å Streamlit-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ==========
def main():
    # –í–µ—Ä—Ö–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
    st.markdown("<h1 style='text-align: center; color: #4b6584;'> –û–¢–ß–ï–¢ –û –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò –î–û–ü–†–ê–®–ò–í–ê–ï–ú–û–ì–û –° –†–ê–°–®–ò–§–†–û–í–ö–û–ô –ü–û–ö–ê–ó–ê–ù–ò–ô </h1>", unsafe_allow_html=True)
    st.markdown("---")

    # 1) –í—ã–±–∏—Ä–∞–µ–º –≤–∏–¥–µ–æ
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ–º–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–ø—Ä–æ—Å–∞ (MP4)",
        type=["mp4"],
        help="–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –õ–∏–º–∏—Ç 200–ú–ë –Ω–∞ —Ñ–∞–π–ª."
    )

    if uploaded_file is not None:
        # –°–æ–∑–¥–∞—ë–º –Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        create_directories()
        video_path = f"storage/videos/{uploaded_file.name}"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫—É
        with open(video_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
        st.success("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")

        # 2) –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Ü –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
        if st.button("–ó–ê–ü–£–°–¢–ò–¢–¨ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –í–ï–†–ë–ê–õ–¨–ù–´–• –ò –ù–ï–í–ï–†–ë–ê–õ–¨–ù–´–• –†–ï–ê–ö–¶–ò–ô"):
            # –°–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –∏–ª–ª—é–∑–∏–∏ –ø–æ—ç—Ç–∞–ø–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            progress_bar = st.progress(0)

            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ..."):
                # ========== –®–∞–≥ A: –ê–Ω–∞–ª–∏–∑ –ª–∏—Ü ==========
                progress_bar.progress(10)
                csv_path = run_face_analysis(video_path)
                
                hash_value = Path(csv_path).stem

                st.success(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ–¥ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º —Ö—ç—à–µ–º:")
                st.code(hash_value, language="text")

                
                if csv_path:
                    progress_bar.progress(40)
                    df, summary = analyze_csv(csv_path)

                    # ========== –®–∞–≥ B: –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã (Completions) ==========
                    st.subheader("üß† –ê–ù–ê–õ–ò–ó –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø")
                    insights = get_openai_insights(df)
                    st.write(insights)
                    st.download_button(
                        label="üíæ –≠–ö–°–ü–û–†–¢ –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –í CSV",
                        data=df.to_csv(index=False),
                        file_name=f"{uploaded_file.name.replace('.mp4', '.csv')}",
                        mime="text/csv"
                    )
                else:
                    st.error("CSV —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    progress_bar.progress(40)

                # ========== –®–∞–≥ C: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ ==========
                try:
                    progress_bar.progress(60)
                    st.subheader("–°–¢–ï–ù–û–ì–†–ê–ú–ú–ê –í–ï–†–ë–ê–õ–¨–ù–´–• –ü–û–ö–ê–ó–ê–ù–ò–ô")
                    audio_path = f"storage/audio/{Path(video_path).stem}.wav"

                    st.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫–∏...")
                    extract_audio(video_path, audio_path)
                    progress_bar.progress(70)

                    st.info("–ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ä–µ—á–µ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
                    transcript_text = transcribe_audio(audio_path, whisper_model="small")
                    st.success("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                    # st.write("**–°—ã—Ä–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç:**")
                    # st.write(transcript_text)
                    progress_bar.progress(85)

                    # ========== –®–∞–≥ D: –ü—Ä–æ–≥–æ–Ω —á–µ—Ä–µ–∑ ChatGPT –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è ==========
                    st.info("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏...")
                    enhanced_text = enhance_transcript(transcript_text)
                    st.write("**–í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–ï–ù–û–ì–†–ê–ú–ú–ê:**")
                    st.write(enhanced_text)
                    progress_bar.progress(100)

                    # ========== –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (summary) —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞ ==========
                    st.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π...")
                    summary_text = summarize_transcript(enhanced_text)
                    st.subheader("**–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–û–ï –†–ï–ó–Æ–ú–ï –ü–û–ö–ê–ó–ê–ù–ò–ô**")
                    st.write(summary_text)

                    st.download_button(
                        label="–≠–ö–°–ü–û–†–¢ –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–û–ô –°–¢–ï–ù–û–ì–†–ê–ú–ú–´ (TXT)",
                        data=transcript_text,
                        file_name="raw_transcript.txt",
                        mime="text/plain"
                    )

                    # Button to download enhanced transcript as a text file
                    st.download_button(
                        label="–≠–ö–°–ü–û–†–¢ –í–ï–†–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–ô –°–¢–ï–ù–û–ì–†–ê–ú–ú–´(TXT)",
                        data=enhanced_text,
                        file_name="enhanced_transcript.txt",
                        mime="text/plain"
                    )

                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
                    st.download_button(
                        label="–≠–ö–°–ü–û–†–¢ –ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–û–ì–û –†–ï–ó–Æ–ú–ï (TXT)",
                        data=summary_text,
                        file_name="summary.txt",
                        mime="text/plain"
                    )


                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")

    # –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666;'>
            ¬© 2025 –°–ò–°–¢–ï–ú–ê –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê –°–£–î–ï–ë–ù–û-–°–õ–ï–î–°–¢–í–ï–ù–ù–´–• –ú–ê–¢–ï–†–ò–ê–õ–û–í | –í–µ—Ä—Å–∏—è 1.0
        </div>
        """,
        unsafe_allow_html=True 
    )

if __name__ == "__main__":
    main()
