import streamlit as st
import cv2
import numpy as np
import os
import pandas as pd
from pathlib import Path
from face_analysis_main import FaceAnalysisPipeline
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ –ª–∏—Ü –≤ –≤–∏–¥–µ–æ",
    page_icon="üé•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
def create_directories():
    try:
        Path("storage/videos").mkdir(parents=True, exist_ok=True)
        Path("storage/results").mkdir(parents=True, exist_ok=True)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {str(e)}")
        raise

# –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü
def analyze_video(video_path):
    try:
        face_analysis_pipeline = FaceAnalysisPipeline("yolov5s.pt", video_path)
        face_analysis_pipeline.run_analysis()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∏–¥–µ–æ: {str(e)}"

# –ê–Ω–∞–ª–∏–∑ CSV –¥–∞–Ω–Ω—ã—Ö
def analyze_csv(csv_path):
    try:
        df = pd.read_csv(csv_path)
        expression_counts = df["Expression"].value_counts()
        avg_confidence = df.groupby("Expression")["Confidence"].mean()
        
        summary = """
        üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º –ª–∏—Ü**:
        - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–π:
        {expression_counts}
        - –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:
        {avg_confidence}
        """.format(expression_counts=expression_counts.to_string(), avg_confidence=avg_confidence.to_string())
        
        return df, summary
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ CSV: {str(e)}"

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤ OpenAI API
def get_openai_insights(df):
    try:
        api_key = st.secrets.get("openai_api_key")
        if not api_key:
            return "–û—à–∏–±–∫–∞: API –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        
        client = openai.OpenAI(api_key=api_key)
        summary_prompt = f"""
        –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ª–∏—Ü:
        {df.to_string()}
        –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∏—Å–ø—ã—Ç—É–µ–º—ã—Ö, –¥–∏–Ω–∞–º–∏–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤—ã–≤–æ–¥–∞—Ö.
        """
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ —ç–º–æ—Ü–∏—è–º –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É."},
                {"role": "user", "content": summary_prompt}
            ],
            max_tokens=500,
            temperature=0.5
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI API: {str(e)}"

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
st.header("üé• –ê–Ω–∞–ª–∏–∑ –ª–∏—Ü –≤ –≤–∏–¥–µ–æ")

uploaded_file = st.file_uploader(
    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª (MP4)",
    type=["mp4"],
    help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ MP4"
)

if uploaded_file is not None:
    create_directories()
    video_path = f"storage/videos/{uploaded_file.name}"
    
    with open(video_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    st.success("–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    
    if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ª–∏—Ü"):
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ..."):
            analyze_video(video_path)
            csv_path = f"storage/results/{uploaded_file.name.replace('.mp4', '.csv')}"
            
            if os.path.exists(csv_path):
                df, summary = analyze_csv(csv_path)
                if df is not None:
                    st.subheader("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
                    st.write(summary)
                    
                    st.subheader("üß† –ò–Ω—Å–∞–π—Ç—ã –æ—Ç OpenAI")
                    insights = get_openai_insights(df)
                    st.write(insights)
                    
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                        data=df.to_csv(index=False),
                        file_name=f"{uploaded_file.name.replace('.mp4', '.csv')}",
                        mime="text/csv"
                    )
                else:
                    st.error(summary)
            else:
                st.error("CSV —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ù–∏–∂–Ω–∏–π –∫–æ–ª–æ–Ω—Ç–∏—Ç—É–ª
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        ¬© 2024 –ê–Ω–∞–ª–∏–∑ –ª–∏—Ü –≤ –≤–∏–¥–µ–æ | –í–µ—Ä—Å–∏—è 1.0
    </div>
    """,
    unsafe_allow_html=True 
)